{"version":3,"sources":["components/Layout.tsx","components/Keyboard.tsx","components/Words.tsx","components/Switch.tsx","lib/Options.ts","components/TypingGame.tsx","lib/KeySwitcher.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["dvorakLayout","default","shift","VirtualKeyboard","props","buttonTheme","class","buttons","nextKey","onChange","input","console","log","onKeyPress","button","layout","physicalKeyboardHighlight","theme","words","Switch","isOn","handleToggle","checked","className","id","type","style","background","htmlFor","loadForceDvorakModeOption","forceDvorak","localStorage","getItem","toBoolean","option","toLowerCase","TypingGame","options","useState","currentWord","setCurrentWord","currentPosition","setCurrentPosition","score","setScore","missCount","setMissCount","time","setTime","gameState","setGameState","forceDvorakMode","setForceDvorakMode","setNextKey","setNewWord","useCallback","nextWord","Math","floor","random","length","getRandomWord","initializeGame","useEffect","intervalId","setInterval","clearInterval","setItem","toString","saveForceDvorakModeOption","Object","defineProperty","KeyboardEvent","prototype","configurable","get","this","shiftKey","code","resultMsg","handleKeyDown","event","key","nextPosition","placeholder","i","substring","window","addEventListener","removeEventListener","display","flexDirection","justifyContent","alignItems","fontFamily","letterSpacing","height","width","fontSize","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.596176a4.chunk.js","sourcesContent":["export const dvorakLayout = {\n  default: [\n    '` 1 2 3 4 5 6 7 8 9 0 [ ] {bksp}',\n    '{tab} \\' , . p y f g c r l / = \\\\',\n    '{lock} a o e u i d h t n s - {enter}',\n    '{shift} ; q j k x b m w v z {shift}',\n    '{space}'\n  ],\n  shift: [\n    '~ ! @ # $ % ^ & * ( ) { } {bksp}',\n    '{tab} \" < > P Y F G C R L ? + |',\n    '{lock} A O E U I D H T L S _ {enter}',\n    '{shift} : Q J K X B M W V Z {shift}',\n    '{space}'\n  ],\n}\n","import React from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\nimport { dvorakLayout } from './Layout';\nimport './Keyboard.css';\n\nconst VirtualKeyboard: React.FC<{nextKey: string}> = (props: {nextKey: string}) => {\n  const onChange = (input: string) => {\n    console.log(\"Input changed\", input);\n  }\n\n  const onKeyPress = (button: string) => {\n    console.log(\"Button pressed\", button);\n  }\n\n  const buttonTheme = [\n    {\n      class: \"next-key\",\n      buttons: props.nextKey,\n    }\n  ]\n\n  return (\n    <Keyboard\n      onChange={onChange}\n      onKeyPress={onKeyPress}\n      layout={dvorakLayout}\n      physicalKeyboardHighlight={true}\n      theme={\"hg-theme-default hg-layout-default\"}\n      buttonTheme={buttonTheme}\n    />\n  );\n\n}\n\nexport default VirtualKeyboard;","export const words: Array<string> = [\n  'the',\n  'quick',\n  'brown',\n  'fox',\n  'jumps',\n  'over',\n  'lazy',\n  'dog',\n];\n","import React from 'react';\nimport '../styles/Switch.css';\n\nconst Switch: React.FC<{isOn: any, handleToggle: any}> = ({ isOn, handleToggle }) => {\n  return (\n    <>\n      <input\n        checked={isOn}\n        onChange={handleToggle}\n        className='react-switch-checkbox'\n        id={`react-switch-new`}\n        type='checkbox'\n      />\n      <label\n        style={{ background: isOn && '#06D6A0'}}\n        className='react-switch-label'\n        htmlFor={`react-switch-new`}\n      >\n        <span className={`react-switch-button`} />\n      </label>\n    </>\n  )\n}\n\nexport default Switch\n","/**\n * typingGameコンポーネントにわたすオプションのインターフェース\n */\nexport interface typingOption {\n  forceDvorakMode: boolean,\n}\n\n/**\n * forceDvorakModeオプションの取得\n */\nexport const loadForceDvorakModeOption = (): boolean => {\n  const forceDvorak: string | null = localStorage.getItem('forceDvorakMode');\n  return toBoolean(forceDvorak)\n}\n\n/**\n * forceDvorakModeオプションの保存\n * @param forceDvorakMode\n */\nexport const saveForceDvorakModeOption = (forceDvorakMode: boolean) => {\n  localStorage.setItem('forceDvorakMode', forceDvorakMode.toString())\n}\n\n/**\n * localStorageにstringとして保存したbool値をbooleanに戻す\n * @param option bool値に戻したいオプション\n */\nconst toBoolean = (option: string | null): boolean  => {\n  const booleanOption = option === null ? false : option.toLowerCase() === 'true';\n  return booleanOption\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport VirtualKeyboard from './Keyboard';\nimport { words } from './Words';\nimport Switch from './Switch';\nimport { enableForceDvorakMode, disableForceDvorakMode } from '../lib/KeySwitcher';\nimport { typingOption, saveForceDvorakModeOption } from '../lib/Options';\n\n/**\n * Get a ramdom word.\n * @param words target words to select ramdomly.\n * @return a ramdom selected word.\n */\nconst getRandomWord = (words: Array<string>) => {\n  return words[Math.floor(Math.random() * words.length)];\n}\n\ntype GameState = 'playing' | 'paused' | 'end'\n\nconst TypingGame: React.FC<{options: typingOption}> = ({options}) => {\n  const [currentWord, setCurrentWord] = useState<string>(' Let\\'s Dvorak! Press Space to start!');\n  const [currentPosition, setCurrentPosition] = useState<number>(0);\n  const [score, setScore] = useState<number>(0);\n  const [missCount, setMissCount] = useState<number>(0);\n  const timeLimit = 30;\n  const [time, setTime] = useState<number>(timeLimit);\n  const [gameState, setGameState] = useState<GameState>('paused');\n  const [forceDvorakMode, setForceDvorakMode] = useState<boolean>(options.forceDvorakMode);\n  const [nextKey, setNextKey] = useState<string>('Space');\n\n  /**\n   * get new word and update current word and next key\n   */\n  const setNewWord = useCallback(() => {\n    const nextWord = getRandomWord(words);\n    setCurrentWord(nextWord);\n    setNextKey(nextWord[0]);\n  }, []);\n\n  /**\n   * Initialize typing game.\n   */\n  const initializeGame = useCallback(() => {\n    setNewWord();\n    setTime(timeLimit);\n    setGameState('playing');\n    setScore(0);\n    setMissCount(0);\n    setCurrentPosition(0);\n  }, [setNewWord]);\n\n  // Count down timer\n  useEffect(() => {\n    if (gameState === 'paused' || gameState === 'end') {\n      return;\n    }\n    if (!time) {\n      setGameState('end');\n      return;\n    }\n    const intervalId = setInterval(() => {\n      setTime(time-1);\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [time, gameState]);\n\n  // Swithing force dvorak mode\n  useEffect(() => {\n    saveForceDvorakModeOption(forceDvorakMode);\n    if (forceDvorakMode) {\n      enableForceDvorakMode()\n    } else {\n      disableForceDvorakMode()\n    }\n  }, [forceDvorakMode])\n\n  useEffect(() => {\n    if (gameState === 'end') {\n      const resultMsg = 'Your score: ' + score.toString() + '  Miss: ' + missCount.toString();\n      setCurrentWord(' Game End! ' + resultMsg);\n    }\n  }, [gameState, score, missCount])\n\n  /**\n   * Callback to deal with keyboard inputs.\n   */\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    if (gameState === 'paused' || gameState === 'end') {\n      // press space to start\n      if (event.code === 'Space') {\n        initializeGame();\n      }\n      return;\n    }\n    if (event.key === currentWord[currentPosition]) {\n      const nextPosition = currentPosition + 1;\n      let placeholder = '';\n      for (let i = 0; i < nextPosition; i++) {\n        placeholder += '_';\n      }\n      // After typing a word to the end, set a next word.\n      if (nextPosition === currentWord.length) {\n        setCurrentPosition(0);\n        setNewWord();\n        return;\n      }\n      setScore(score+1);\n      setCurrentWord(placeholder + currentWord.substring(nextPosition));\n      setCurrentPosition(nextPosition);\n      setNextKey(currentWord[nextPosition]);\n    } else {\n      setMissCount(missCount+1);\n      setScore(score-1);\n    }\n  }, [gameState, currentWord, currentPosition, score, missCount, initializeGame, setNewWord]);\n\n  // Register callback for keyboard inputs.\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return (\n    <div>\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent:'center',\n        alignItems:'center',\n        fontFamily:'monospace',\n        letterSpacing: '3px',\n        height: '100vh'}}\n      >\n        <h2>Time: {time}</h2>\n        <h1>{currentWord}</h1>\n        <VirtualKeyboard nextKey={nextKey}/>\n        <div style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-evenly',\n          alignItems: 'center',\n          height: '40px',\n          width: '350px',\n          fontSize: '16px',\n          letterSpacing: '1px'}}\n        >\n          <Switch\n            isOn={forceDvorakMode}\n            handleToggle={() => setForceDvorakMode(!forceDvorakMode)}\n          />\n          <div>Switch 'qwerty' to 'dvorak'</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TypingGame\n","export const enableForceDvorakMode = () => {\n    Object.defineProperty(KeyboardEvent.prototype, 'key', {\n        configurable: true,\n        get: function() {\n            if (this.shiftKey) {\n                switch (this.code) {\n                case 'BracketLeft': return '?'\n                case 'Digit1': return '!'\n                default: return ''\n                }\n            }\n            switch (this.code) {\n                // 真ん中の列\n                case 'KeyA': return 'a'\n                case 'KeyS': return 'o'\n                case 'KeyD': return 'e'\n                case 'KeyF': return 'u'\n                case 'KeyG': return 'i'\n                case 'KeyH': return 'd'\n                case 'KeyJ': return 'h'\n                case 'KeyK': return 't'\n                case 'KeyL': return 'n'\n                case 'Semicolon': return 's'\n                case 'Quote': return '-'\n                // 上段\n                case 'KeyQ': return '\\''\n                case 'KeyW': return ','\n                case 'KeyE': return '.'\n                case 'KeyR': return 'p'\n                case 'KeyT': return 'y'\n                case 'KeyY': return 'f'\n                case 'KeyU': return 'g'\n                case 'KeyI': return 'c'\n                case 'KeyO': return 'r'\n                case 'KeyP': return 'l'\n                // 下段\n                case 'KeyZ': return ';'\n                case 'KeyX': return 'q'\n                case 'KeyC': return 'j'\n                case 'KeyV': return 'k'\n                case 'KeyB': return 'x'\n                case 'KeyN': return 'b'\n                case 'KeyM': return 'm'\n                case 'Comma': return 'w'\n                case 'Period': return 'v'\n                case 'Slash': return 'z'\n                default: return ''\n            }\n        }\n    })\n}\nexport const disableForceDvorakMode = () => {\n    Object.defineProperty(KeyboardEvent.prototype, 'key', {\n        configurable: true,\n        get: function() {\n            if (this.shiftKey) {\n                switch (this.code) {\n                case 'BracketLeft': return '{'\n                case 'Digit1': return '!'\n                default: return ''\n                }\n            }\n            switch (this.code) {\n                // 真ん中の列\n                case 'KeyA': return 'a'\n                case 'KeyS': return 's'\n                case 'KeyD': return 'd'\n                case 'KeyF': return 'f'\n                case 'KeyG': return 'g'\n                case 'KeyH': return 'h'\n                case 'KeyJ': return 'j'\n                case 'KeyK': return 'k'\n                case 'KeyL': return 'l'\n                case 'Semicolon': return ';'\n                case 'Quote': return '\\''\n                // 上段\n                case 'KeyQ': return 'q'\n                case 'KeyW': return 'w'\n                case 'KeyE': return 'e'\n                case 'KeyR': return 'r'\n                case 'KeyT': return 't'\n                case 'KeyY': return 'y'\n                case 'KeyU': return 'u'\n                case 'KeyI': return 'i'\n                case 'KeyO': return 'o'\n                case 'KeyP': return 'p'\n                // 下段\n                case 'KeyZ': return 'z'\n                case 'KeyX': return 'x'\n                case 'KeyC': return 'c'\n                case 'KeyV': return 'v'\n                case 'KeyB': return 'b'\n                case 'KeyN': return 'n'\n                case 'KeyM': return 'm'\n                case 'Comma': return ','\n                case 'Period': return '.'\n                case 'Slash': return '/'\n                default: return ''\n            }\n        }\n    })\n}","import React from 'react';\nimport TypingGame from './components/TypingGame';\nimport { typingOption, loadForceDvorakModeOption } from './lib/Options';\n\nconst App: React.FC = () => {\n  const options: typingOption = {\n    forceDvorakMode: loadForceDvorakModeOption(),\n  }\n\n  return (\n    <div>\n      <TypingGame options={options}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}