{"version":3,"sources":["components/Layout.tsx","components/Keyboard.tsx","components/Words.tsx","components/TypingGame.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["dvorakLayout","default","shift","VirtualKeyboard","onChange","input","console","log","onKeyPress","button","layout","physicalKeyboardHighlight","words","getRandomWord","Math","floor","random","length","TypingGame","useState","currentWord","setCurrentWord","currentPosition","setCurrentPosition","score","setScore","missCount","setMissCount","time","setTime","gameState","setGameState","useEffect","intervalId","setInterval","clearInterval","window","confirm","toString","handleKeyDown","useCallback","event","key","nextPosition","placeholder","i","substring","addEventListener","removeEventListener","style","display","flexDirection","justifyContent","alignItems","fontFamily","letterSpacing","height","fontWeight","padding","borderStyle","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oNAAaA,G,MAAe,CAC1BC,QAAS,CACP,mCACA,mCACA,uCACA,sCACA,WAEFC,MAAO,CACL,mCACA,kCACA,uCACA,sCACA,aCaWC,EApBmB,WAShC,OACE,kBAAC,IAAD,CACEC,SAVa,SAACC,GAChBC,QAAQC,IAAI,gBAAiBF,IAU3BG,WAPe,SAACC,GAClBH,QAAQC,IAAI,iBAAkBE,IAO5BC,OAAQV,EACRW,2BAA2B,KCpBpBC,EAAuB,CAClC,QACA,SACA,MACA,OACA,QACA,QACA,OCEIC,EAAgB,SAACD,GACrB,OAAOA,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,UA6GjCC,EAxGc,WAAO,IAAD,EACKC,mBAAiB,kBADtB,mBAC1BC,EAD0B,KACbC,EADa,OAEaF,mBAAiB,GAF9B,mBAE1BG,EAF0B,KAETC,EAFS,OAGPJ,mBAAiB,GAHV,mBAG1BK,EAH0B,KAGnBC,EAHmB,OAICN,mBAAiB,GAJlB,mBAI1BO,EAJ0B,KAIfC,EAJe,OAKTR,mBAAiB,IALR,mBAK1BS,EAL0B,KAKpBC,EALoB,OAMCV,mBAAoB,UANrB,mBAM1BW,EAN0B,KAMfC,EANe,KAoBjCC,qBAAU,WACR,GAAkB,WAAdF,GAAwC,QAAdA,EAA9B,CAGA,GAAKF,EAAL,CAIA,IAAMK,EAAaC,aAAY,WAC7BL,EAAQD,EAAK,KACZ,KACH,OAAO,kBAAMO,cAAcF,IANzBF,EAAa,UAOd,CAACH,EAAME,IAEVE,qBAAU,WACU,QAAdF,IACFM,OAAOC,QAAQ,eAAiBb,EAAMc,WAAa,WAAaZ,EAAUY,YAC1EjB,EAAe,iBAEhB,CAACS,EAAWN,EAAOE,IAKtB,IAAMa,EAAgBC,uBAAY,SAACC,GACjC,GAAkB,WAAdX,GAAwC,QAAdA,EAG9B,GAAIW,EAAMC,MAAQtB,EAAYE,GAAkB,CAG9C,IAFA,IAAMqB,EAAerB,EAAkB,EACnCsB,EAAc,GACTC,EAAI,EAAGA,EAAIF,EAAcE,IAChCD,GAAe,IAGjB,GAAID,IAAiBvB,EAAYH,OAG/B,OAFAI,EAAeR,EAAcD,SAC7BW,EAAmB,GAGrBE,EAASD,EAAM,GACfH,EAAeuB,EAAcxB,EAAY0B,UAAUH,IACnDpB,EAAmBoB,QAEnBhB,EAAaD,EAAU,GACvBD,EAASD,EAAM,KAEhB,CAACM,EAAWV,EAAaE,EAAiBE,EAAOE,IAQpD,OALAM,qBAAU,WAER,OADAI,OAAOW,iBAAiB,UAAWR,GAC5B,kBAAMH,OAAOY,oBAAoB,UAAWT,MAClD,CAACA,IAGF,6BACE,yBAAKU,MAAO,CACVC,QAAS,OACTC,cAAe,SACfC,eAAe,SACfC,WAAW,SACXC,WAAW,YACXC,cAAe,MACfC,OAAQ,UAER,4BACEP,MAAO,CACLQ,WAAY,OACZC,QAAS,YACTC,YAAa,QAEfC,QAjFe,WACrBvC,EAAeR,EAAcD,IAC7BmB,EAAa,WACbF,EAAQ,IACRJ,EAAS,GACTE,EAAa,KAsET,SAUA,qCAAWC,GACX,4BAAKR,GACL,kBAAC,EAAD,SCtGOyC,EARO,WACpB,OACE,6BACE,kBAAC,EAAD,QCMcC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,a","file":"static/js/main.2c90da5d.chunk.js","sourcesContent":["export const dvorakLayout = {\n  default: [\n    '` 1 2 3 4 5 6 7 8 9 0 [ ] {bksp}',\n    '{tab} \\' , . p y f g c r l / = \\\\',\n    '{lock} a o e u i d h t n s - {enter}',\n    '{shift} ; q j k x b m w v z {shift}',\n    '{space}'\n  ],\n  shift: [\n    '~ ! @ # $ % ^ & * ( ) { } {bksp}',\n    '{tab} \" < > P Y F G C R L ? + |',\n    '{lock} A O E U I D H T L S _ {enter}',\n    '{shift} : Q J K X B M W V Z {shift}',\n    '{space}'\n  ],\n}\n","import React from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport 'react-simple-keyboard/build/css/index.css';\nimport { dvorakLayout } from './Layout';\n\n\nconst VirtualKeyboard: React.FC = () => {\n  const onChange = (input: string) => {\n    console.log(\"Input changed\", input);\n  }\n\n  const onKeyPress = (button: string) => {\n    console.log(\"Button pressed\", button);\n  }\n\n  return (\n    <Keyboard\n      onChange={onChange}\n      onKeyPress={onKeyPress}\n      layout={dvorakLayout}\n      physicalKeyboardHighlight={true}\n    />\n  );\n\n}\n\nexport default VirtualKeyboard;","export const words: Array<string> = [\n  'apple',\n  'banana',\n  'car',\n  'door',\n  'event',\n  'floor',\n  'goo',\n];\n","import React, { useState, useEffect, useCallback } from 'react';\nimport VirtualKeyboard from './Keyboard';\nimport { words } from './Words';\n\n/**\n * Get a ramdom word.\n * @param words target words to select ramdomly.\n * @return a ramdom selected word.\n */\nconst getRandomWord = (words: Array<string>) => {\n  return words[Math.floor(Math.random() * words.length)];\n}\n\ntype GameState = 'playing' | 'paused' | 'end'\n\nconst TypingGame: React.FC = () => {\n  const [currentWord, setCurrentWord] = useState<string>(' Let\\'s Dvorak!');\n  const [currentPosition, setCurrentPosition] = useState<number>(0);\n  const [score, setScore] = useState<number>(0);\n  const [missCount, setMissCount] = useState<number>(0);\n  const [time, setTime] = useState<number>(30);\n  const [gameState, setGameState] = useState<GameState>('paused');\n\n  /**\n   * Initialize typing game.\n   */\n  const initializeGame = () => {\n    setCurrentWord(getRandomWord(words));\n    setGameState('playing');\n    setTime(30);\n    setScore(0);\n    setMissCount(0);\n  }\n\n  // Count down timer\n  useEffect(() => {\n    if (gameState === 'paused' || gameState === 'end') {\n      return;\n    }\n    if (!time) {\n      setGameState('end');\n      return;\n    }\n    const intervalId = setInterval(() => {\n      setTime(time-1);\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [time, gameState]);\n\n  useEffect(() => {\n    if (gameState === 'end') {\n      window.confirm('Your score: ' + score.toString() + '  Miss: ' + missCount.toString());\n      setCurrentWord(' Game End!');\n    }\n  }, [gameState, score, missCount])\n\n  /**\n   * Callback to deal with keyboard inputs.\n   */\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    if (gameState === 'paused' || gameState === 'end') {\n      return;\n    }\n    if (event.key === currentWord[currentPosition]) {\n      const nextPosition = currentPosition + 1;\n      let placeholder = '';\n      for (let i = 0; i < nextPosition; i++) {\n        placeholder += '_';\n      }\n      // After typing a word to the end, set a next word.\n      if (nextPosition === currentWord.length) {\n        setCurrentWord(getRandomWord(words));\n        setCurrentPosition(0);\n        return;\n      }\n      setScore(score+1);\n      setCurrentWord(placeholder + currentWord.substring(nextPosition));\n      setCurrentPosition(nextPosition);\n    } else {\n      setMissCount(missCount+1);\n      setScore(score-1);\n    }\n  }, [gameState, currentWord, currentPosition, score, missCount]);\n\n  // Register callback for keyboard inputs.\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return (\n    <div>\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent:'center',\n        alignItems:'center',\n        fontFamily:'monospace',\n        letterSpacing: '3px',\n        height: '100vh'}}\n      >\n        <button\n          style={{\n            fontWeight: 'bold',\n            padding: '10px 30px',\n            borderStyle: 'None',\n          }}\n          onClick={initializeGame}\n        >\n          START\n        </button>\n        <h2>Time: {time}</h2>\n        <h1>{currentWord}</h1>\n        <VirtualKeyboard/>\n      </div>\n    </div>\n  )\n}\n\nexport default TypingGame\n","import React from 'react';\nimport TypingGame from './components/TypingGame';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <TypingGame/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}